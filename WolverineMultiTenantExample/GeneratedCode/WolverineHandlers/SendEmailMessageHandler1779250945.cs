// <auto-generated/>
#pragma warning disable
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using WolverineMultiTenantExample.Services;

namespace Internal.Generated.WolverineHandlers
{
    // START: SendEmailMessageHandler1779250945
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class SendEmailMessageHandler1779250945 : Wolverine.Runtime.Handlers.MessageHandler
    {
        private readonly Microsoft.Extensions.DependencyInjection.IServiceScopeFactory _serviceScopeFactory;
        private readonly WolverineMultiTenantExample.Services.ITenantService _tenantService;
        private readonly Microsoft.Extensions.Logging.ILogger<WolverineMultiTenantExample.TenantContextMiddleware> _logger1;
        private readonly Microsoft.Extensions.Logging.ILogger<WolverineMultiTenantExample.EmailHandler> _logger2;

        public SendEmailMessageHandler1779250945(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory, WolverineMultiTenantExample.Services.ITenantService tenantService, Microsoft.Extensions.Logging.ILogger<WolverineMultiTenantExample.TenantContextMiddleware> __logger1, Microsoft.Extensions.Logging.ILogger<WolverineMultiTenantExample.EmailHandler> __logger2)
        {
            _serviceScopeFactory = serviceScopeFactory;
            _tenantService = tenantService;
            _logger1 = __logger1;
            _logger2 = __logger2;
        }



        public override async System.Threading.Tasks.Task HandleAsync(Wolverine.Runtime.MessageContext context, System.Threading.CancellationToken cancellation)
        {
            var tenantIdentifier = new JasperFx.MultiTenancy.TenantId(context.TenantId);
            using var serviceScope = _serviceScopeFactory.CreateScope();
            
            /*
            * The service registration for WolverineMultiTenantExample.ITenantServiceFactory<WolverineMultiTenantExample.Data.TenantDbContext> is an 'opaque' lambda factory with the Scoped lifetime and requires service location
            */
            var tenantServiceFactory = Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<WolverineMultiTenantExample.ITenantServiceFactory<WolverineMultiTenantExample.Data.TenantDbContext>>(serviceScope.ServiceProvider);
            // The actual message body
            var sendEmailMessage = (WolverineMultiTenantExample.Models.SendEmailMessage)context.Envelope.Message;

            var tenantContextMiddleware = new WolverineMultiTenantExample.TenantContextMiddleware(_tenantService, _logger1);
            var tenant = await tenantContextMiddleware.BeforeAsync(context, tenantIdentifier).ConfigureAwait(false);
            try
            {
                System.Diagnostics.Activity.Current?.SetTag("message.handler", "WolverineMultiTenantExample.EmailHandler");
                var emailHandler = new WolverineMultiTenantExample.EmailHandler(tenant, tenantServiceFactory, _logger2);
                
                // The actual message execution
                await emailHandler.Handle(sendEmailMessage).ConfigureAwait(false);

            }

            finally
            {
                tenantContextMiddleware.Finally();
            }

        }

    }

    // END: SendEmailMessageHandler1779250945
    
    
}

